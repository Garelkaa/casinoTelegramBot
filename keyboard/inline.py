import random

from aiogram.utils.keyboard import (
    InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
)

from signature import userdb
from loader_cfg import (
    dice_link, pay_link, back_money, sub_link
)


class UserKeyboard:
    @staticmethod
    def user_menu():
        button = [
            ("–ò–≥—Ä—ã", "plays"),
            ("–ü—Ä–æ—Ñ–∏–ª—å", "profile"),
            ("–ë–æ–Ω—É—Å—ã", "bonuss"),
            ("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?", "get_play"),
            ("–ü—Ä–∞–≤–∏–ª–∞", "rules"),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "static"),
            ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in button:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust(1, 2, 1, 3).as_markup()
    
    @staticmethod
    def check_subs():
        buttons = [
            ("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", sub_link)
        ]
        menu = InlineKeyboardBuilder()
        for text, url in buttons:
            menu.add(InlineKeyboardButton(text=text, url=url))
        return menu.adjust(1).as_markup()


    @staticmethod
    def user_ref_menu():
        buttons = [
            ("–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", "ref"),
            ("–í—ã–≤–µ—Å—Ç–∏", "back_money"),
            ("–ù–∞–∑–∞–¥", "back")
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust(1, 1).as_markup()
    
    @staticmethod
    def back_referal():
        buttons = [
            ("–ù–∞–∑–∞–¥", "back_ref")
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust().as_markup()
    
    @staticmethod
    def back_stat():
        buttons = [
            ("–ù–∞–∑–∞–¥", "back")
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust().as_markup()

    @staticmethod
    async def get_bonus_menu():
        buttons = await userdb.get_price_bonus()
        
        menu = InlineKeyboardBuilder()
        for b in buttons:
            print(b)
            menu.add(InlineKeyboardButton(text=f"{b.name_bonus} - {b.price}$", callback_data=f'bonus_{b.id}'))
        menu.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
                 
        return menu.adjust(1).as_markup()

    @staticmethod
    def back_bonus(url):
        buttons = [
            ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "check"),
            ("–ù–∞–∑–∞–¥", "back_bonus"),
        ]

        menu = InlineKeyboardBuilder()
        menu.row(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', url=url))
        for text, callback_data in buttons:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust(1).as_markup()
    
    @staticmethod
    def payment_back():
        buttons = [
            ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back")
        ]

        menu = InlineKeyboardBuilder()
        for text, callback_data in buttons:
            menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        return menu.adjust().as_markup()
    
    def get_plays():
        buttons = [
            ("–ö—É–±–∏–∫", dice_link)
        ]

        menu = InlineKeyboardBuilder()
        for text, url in buttons:
            menu.add(InlineKeyboardButton(text=text, url=url))
        menu.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
        return menu.adjust(1).as_markup()
    
    @staticmethod
    def create_link():
        bay = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü´¶–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É", url=pay_link)]
        ])
        return bay
    
    @staticmethod
    def get_box(url):
        bay = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å", url=url)]
        ])
        return bay
    
    @staticmethod
    def back_user_money():
        buttons = [
            ("–ó–∞–±—Ä–∞—Ç—å", back_money)
        ]

        menu = InlineKeyboardBuilder()

        for text, url in buttons:
            menu.add(InlineKeyboardButton(text=text, url=url))    
        return menu.as_markup()
    
    @staticmethod
    def get_create_mines(player_id, user_bet):
        menu = InlineKeyboardBuilder()
        for x in range(7, 0, -1):
            row_buttons = []
            random_button_index = random.randint(0, 2)
            for button_num in range(3):
                if button_num == random_button_index:
                    callback_data = f"win_{x}_{player_id}"
                    text = "üéÅ"
                else:
                    callback_data = f"mines_{player_id}_{x}"
                    text = 'üéÅ'
                row_buttons.append((text, callback_data))
            
            for text, callback_data in row_buttons:
                menu.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        menu.row(InlineKeyboardButton(text=f'–ó–∞–±—Ä–∞—Ç—å {user_bet}üí≤', callback_data=f'save_{player_id}_{user_bet}'))

        return menu.adjust(3).as_markup()