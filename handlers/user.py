from aiogram import F
from aiogram.filters import CommandObject
from aiogram.types import Message, CallbackQuery

from keyboard.text import *
from signature import userdb, crypto
from keyboard.inline import UserKeyboard
from loader_cfg import erorr_users, ref_link, admin_ids


async def create_payment_error(amount, m, player_id, player_name):
    try:
        check = await crypto.create_check(asset='USDT', amount=amount)
        await m.bot.send_message(
            chat_id=player_id, text="üí∞", reply_markup=UserKeyboard.get_box(
                url=check.bot_check_url
            )
        )

    except Exception as e:
        print("error", e)
        erorr_users[player_name] = {"amount": amount}
        await m.bot.send_message(player_id, "–£ –±–æ—Ç–∞ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!")
        for admin in admin_ids:
            await m.bot.send_message(admin, 
                                     f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {player_name}\n"
                                     f"<b>–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç—É –±–æ—Ç–∞!</b>")


async def cmd_start(m: Message, command: CommandObject):
    args = command.args
    user_id = m.from_user.id
    name = m.from_user.full_name

    await userdb.check_user(user_id=user_id, name=name)

    if args:
        if args == 'start':
            if not user_id in erorr_users:
                await m.answer("–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–æ–≤!")
            else:
                error_data = erorr_users[user_id]
                del erorr_users[user_id]
                await create_payment_error(amount=error_data["amount"], player_id=user_id, m=m,
                                    player_name=name)

        elif int(args) != m.from_user.id:
            if await userdb.check_user_referrer(user_id=user_id, referrer_id=int(args), name=name):
                try:
                    await m.bot.send_message(args, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª —Ä–µ—Ñ–µ—Ä")
                except:
                    pass
            else:
                await m.answer(f"–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await m.answer("–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ!")

    else:
        user_url = f'https://t.me/{m.from_user.username}'

        await m.answer(
            f"–ü—Ä–∏–≤–µ—Ç, <b><a href='{user_url}'>{name}</a></b>!\n"
            f"–Ø –±–æ—Ç –¥–ª—è –∫–∞–∑–∏–Ω–æ, –º–æ–µ –∏–º—è AstralDep!\n\n",
            reply_markup=UserKeyboard.user_menu(),
            disable_web_page_preview=True
        )


async def user_profile(call: CallbackQuery):
    res = await userdb.get_user(user_id=call.from_user.id)
    msg = await text_profile(res=res, user_id=call.from_user.id, name=call.from_user.full_name)
    await call.message.edit_text(text=msg, reply_markup=UserKeyboard.user_ref_menu())


async def cmd_back_profile(call: CallbackQuery):
    await call.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç, <b><a href='https://t.me/{call.from_user.username}'>{call.from_user.first_name}</a></b>!\n"
        f"–Ø –±–æ—Ç –¥–ª—è –∫–∞–∑–∏–Ω–æ, –º–æ–µ –∏–º—è AstralDep!\n\n",
        reply_markup=UserKeyboard.user_menu(),
        disable_web_page_preview=True
    )


async def referal_system(call: CallbackQuery):
    ref_link_user = ref_link.format(user_id=call.from_user.id)
    await call.message.edit_text(
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∑–∞ –∫–∞–∂–¥—É—é —Å—Ç–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è –æ—Ç –≤–∞—Å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.2% –æ—Ç –µ–≥–æ —Å—Ç–∞–≤–∫–∏\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"{ref_link_user}", reply_markup=UserKeyboard.back_referal()
    )


async def cmd_static(call: CallbackQuery):
    res, users_count = await userdb.get_statistic()

    await call.message.edit_text(
        f"<u><b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b></u>\n\n"
        f"<b>–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫:</b> {res.all_dep}$\n"
        f"<b>–í—ã–ø–ª–∞—Ç –Ω–∞ —Å—É–º–º—É:</b> {res.all_pay}\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}</b>", reply_markup=UserKeyboard.back_stat()
    )


async def cmd_bonus(call: CallbackQuery):
    await call.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:</b>", reply_markup=await UserKeyboard.get_bonus_menu()
    )


async def cmd_check_plays(call: CallbackQuery):
    await call.message.edit_text(
        "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:</b>", reply_markup=UserKeyboard.get_plays()
    )


async def delete_check(m: Message):
    checks = await crypto.get_checks()
    for check in checks:
        if check.status == 'active':    
            await crypto.delete_check(check_id=check.check_id)
    await m.answer("—è —É–¥–∞–ª–∏–ª –≤—Å–µ —á–µ–∫–∏!")


async def add_balance_bot(m: Message, command: CommandObject):
    try:
        for ad_id in admin_ids:
            if m.from_user.id != ad_id:
                pass
            else:
                amount = int(command.args)
                link = await crypto.create_invoice(asset="USDT", amount=amount)
                await m.answer(f"{link.bot_invoice_url}")
    except:
        await m.answer("–£–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, /add_balance 30")
